#+title: Design Documentation

* Design Choices

Taking into account the modularity, extensibility, and testability required for this simulation program, the strategy design pattern is best suited.

The strategy design pattern allows us to select an algorithm's behavior at runtime. It defines a family of algorithms, encapsulates each one, and makes them interchangeable. In this case, there are multiple methods (strategies) for simulating the physics of a projectile, accounting for different factors such as wind resistance, gravity, barrel pose, etc. These strategies could then be hot swapped at runtime.

This allows for adding new - or removing, variables without affecting the overall structure of the simulation, and without having to change the main simulation code. This separation of concerns makes it easier to write tests for each strategy.

** Benefits

- /Flexibility/: It allows us to dynamically choose between different behaviors.

- /Extensibility/: We can add new behaviors without affecting existing code.

- /Testability/: We can test behaviors individually, isolated from the rest of the system.

** Basic Classes
The individual Classes and basic relationships are as follows:
*** Interfaces

#+begin_src plantuml :file interfaces.png
@startuml
title Interfaces Diagram

package interfaces {
    interface "I3dOutputer" as I3dOutputer {
        +lineStripFromResults(results: Vector3d[]): LineStrip
        +displayChart(lineStrip: LineStrip): void
    }

    interface "IGetConfiguration" as IGetConfiguration {
        +getSetting(setting: Settings): <T> T
    }

    interface "IGetProjectileDrag" as IGetProjectileDrag {
        +getProjectileDrag(): Vector3d
    }

    interface "IGetProjectileForce" as IGetProjectileForce {
        +getProjectileForce(): Vector3d
    }

    interface "IGetProjectileGravity" as IGetProjectileGravity {
        +getProjectileGravity(): Vector3d
    }

    interface "IGetProjectile" as IGetProjectile {
        +getProjectile(): Projectile
    }

    interface "IOutputResults" as IOutputResults {
        +outputResults(results: Vector3d[]): void
    }

    interface "I3dOutputer" as I3dOutputer {
        +lineStripFromResults(results: Vector3d[]): LineStrip
        +displayChart(lineStrip: LineStrip): void
    }
}

I3dOutputer <|-- IOutputResults: extends
IGetConfiguration <|.. GetProjectile: implements
IGetConfiguration <|.. GetProjectileConstantContinualForce: implements
IGetConfiguration <|.. GetProjectileDrag: implements
IGetConfiguration <|.. GetProjectileGravity: implements

@enduml
#+end_src

#+RESULTS:
[[file:interfaces.png]]

*** Handlers

#+begin_src plantuml :file handlers.png
@startuml
title Handlers Diagram

package handlers {
    class "ConsoleOutputer" as ConsoleOutputer {
        +outputResults(results: Vector3d[]): void
        -formatVector(vector: Vector3d): String
        -formatDouble(value: double): String
    }

    class "GetProjectileGravity" as GetProjectileGravity {
        -_configurationHandler: IGetConfiguration
        -_projectileHandler: IGetProjectile
        +GetProjectileGravity(configurationHandler: IGetConfiguration, projectileHander: IGetProjectile)
        +getProjectileGravity(): Vector3d
    }

    class "GetProjectile" as GetProjectile {
        -_configurationHandler: IGetConfiguration
        -_instance: Projectile
        +GetProjectile(configurationHandler: IGetConfiguration)
        +getProjectile(): Projectile
        -createProjectile(): Projectile
    }

    class "StubGetConfiguration" as StubGetConfiguration {
        -_settings: HashMap<String, Object>
        +StubGetConfiguration()
        +StubGetConfiguration(settings: HashMap<String, Object>)
        +getSetting(settingName: String): T
        -initializeSettings(): void
    }

    class "StubGetProjectileDrag" as StubGetProjectileDrag {
        +getProjectileDrag(): Vector3d
    }

    class "StubGetProjectileForce" as StubGetProjectileForce {
        +getProjectileForce(): Vector3d
    }

    class "ChartOutputer3d" as ChartOutputer3d {
        -lineStrip: LineStrip
        +outputResults(results: Vector3d[]): void
        +init(): void
    }

    class "ChartOutputer3dNonACC" as ChartOutputer3dNonACC {
        +outputResults(results: Vector3d[]): void
        +displayChart(lineStrip: LineStrip): void
    }


    class "GetProjectileConstantContinualForce" as GetProjectileConstantContinualForce {
        -_configurationHandler: IGetConfiguration
        -_projectileHandler: IGetProjectile
        +GetProjectileConstantContinualForce(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile)
        +getProjectileForce(): Vector3d
    }

    class "GetProjectileDrag" as GetProjectileDrag {
        -_configurationHandler: IGetConfiguration
        -_projectileHandler: IGetProjectile
        +GetProjectileDrag(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile)
        +getProjectileDrag(): Vector3d
    }

    class "BaseGetConfiguration" {
        -_settings: HashMap<String, Object>
        +BaseGetConfiguration()
        +BaseGetConfiguration(settings: HashMap<String, Object>)
        +getSetting(setting: Settings): T
        +overrideSettings(settings: HashMap<String, Object>): void
        +overrideSetting(key: String, value: Object): void
    }

    class "FileGetConfiguration" {
        -FILE_PATH: String = "simulatorSettings.json"
        +FileGetConfiguration()
        +FileGetConfiguration(settings: HashMap<String, Object>)
        +parseJsonFile(filePath: String): HashMap<String, Object>
        -initializeSettings(): void
    }

}


IOutputResults <.up. ConsoleOutputer: implements
IGetProjectileForce <.up. GetProjectileConstantContinualForce: implements
IGetProjectileDrag <.up. GetProjectileDrag: implements
GetProjectileGravity ..|> IGetProjectileGravity
GetProjectile ..|> IGetProjectile
StubGetConfiguration ..|> IGetConfiguration
StubGetProjectileDrag ..|> IGetProjectileDrag
StubGetProjectileForce ..|> IGetProjectileForce
I3dOutputer <.up. ChartOutputer3d: implements
I3dOutputer <.up. ChartOutputer3dNonACC: implements
IGetConfiguration <|-- BaseGetConfiguration: extends
BaseGetConfiguration <|-- FileGetConfiguration: extends

@enduml
#+end_src

#+RESULTS:
[[file:handlers.png]]

*** Factories

#+begin_src plantuml :file factories.png
@startuml
title Factories Diagram

package factories {
    class "MakeProjectileSimulator" as MakeProjectileSimulator {
        +createProjectileSimulator(configurationHandler: IGetConfiguration): ProjectileSimulator
        -getProjectileGravityHandler(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile): IGetProjectileGravity
        -getProjectileDragHandler(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile): IGetProjectileDrag
        -getProjectileForceyHandler(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile): IGetProjectileForce
        -getProjectileForceHandler(configurationHandler: IGetConfiguration, projectileHandler: IGetProjectile): GetProjectileConstantContinualForce
    }
}

@enduml
#+end_src

#+RESULTS:
[[file:factories.png]]

*** Projectile

#+begin_src plantuml :file projectile.png
@startuml
title Models Diagram

package models {
    class "Projectile" as Projectile {
        -Position: Vector3d
        -Velocity: Vector3d
        -Weight: double
        +Projectile()
        +getPosition(): Vector3d
        +setPosition(x: double, y: double, z: double): void
        +setPosition(position: Vector3d): void
        +getVelocity(): Vector3d
        +setVelocity(x: double, y: double, z: double): void
        +setVelocity(velocity: Vector3d): void
        +getWeight(): double
        +setWeight(weight: double): void
    }
}

@enduml
#+end_src

#+RESULTS:
[[file:projectile.png]]

*** Enums

#+begin_src plantuml :file enums.png
@startuml
title Enums Diagram

package enums {
    enum "DataTypes" {
        Vector,
        Double
        -_type: Class<?>
        +DataTypes(type: Class<?>)
        +getRawType(): Class<?>
    }

    enum "Settings" {
        Gravity,
        Weight,
        InitialForce,
        ContinualForce,
        InitialDirection,
        FluidRho,
        ProjectileArea,
        DragCoefficent
        -name: String
        -type: DataTypes
        -defaultValue: Object
        +Settings(name: String, type: DataTypes)
        +Settings(name: String, type: DataTypes, defaultValue: Object)
        +getName(): String
        +getType(): DataTypes
        +getDefault(): Object
        +parseDouble(in: String): double
        +parseVector(vector: String): Vector3d
        +validateValue(value: T, setting: Settings): boolean
    }
}

DataTypes <-- Settings: uses

@enduml
#+end_src

#+RESULTS:
[[file:enums.png]]

*** Simulator

#+begin_src plantuml :file simulator.png
@startuml
title Simulator Diagram

package pss {
    class "ProjectileSimulator" as ProjectileSimulator {
        -_projectileHandler: IGetProjectile
        -_projectileDragHandler: IGetProjectileDrag
        -_projectileForceHandler: IGetProjectileForce
        -_projectileGravityHandler: IGetProjectileGravity
        -timeStep: double
        +ProjectileSimulator(projectileHandler: IGetProjectile, projectileDragHandler: IGetProjectileDrag, projectileForceHandler: IGetProjectileForce, projectileGravityHandler: IGetProjectileGravity, timeStep: double)
        +getProjectile(): Projectile
        +updatePosition(): Vector3d
        -getNewVelocity(): Vector3d
        -getNewPosition(): Vector3d
    }
}

ProjectileSimulator --> IGetProjectile : uses
ProjectileSimulator --> IGetProjectileDrag : uses
ProjectileSimulator --> IGetProjectileForce : uses
ProjectileSimulator --> IGetProjectileGravity : uses

@enduml
#+end_src

#+RESULTS:
[[file:simulator.png]]

*** Simulation Suite

#+begin_src plantuml :file pss.png
@startuml
title PSS Diagram

package pss {
    class "ProjectileSimulationSuite" as ProjectileSimulationSuite {
        -_results: Vector3d[]
        -_resultsOutputers: IOutputResults[]
        -_configHandler: IGetConfiguration
        -_simulator: ProjectileSimulator
        +{static} main(args: String[]): void
        -{static} initSimulation(): void
        -{static} getOutputers(): IOutputResults[]
        -{static} getOutputerAmount(): int
        -{static} outputResults(): void
    }
}

ProjectileSimulationSuite --> ProjectileSimulator : uses
ProjectileSimulationSuite --> IGetConfiguration : uses
ProjectileSimulationSuite --> IOutputResults : uses

@enduml
#+end_src

#+RESULTS:
[[file:pss.png]]


* Overall Class Diagram

For readability, stub classes and settings enums are not included in this diagram, refer to diagrams above for details.

#+begin_src plantuml :file suite.png
@startuml

title Projectile Simulation Suite (PSS) Class Diagram

package pss.models {
    class "Projectile" as Projectile {
        -Position: Vector3d
        -Velocity: Vector3d
        -Weight: double
        +Projectile()
        +getPosition(): Vector3d
        +setPosition(): void
        +setPosition(): void
        +getVelocity(): Vector3d
        +setVelocity(): void
        +setVelocity(): void
        +getWeight(): double
        +setWeight(): void
    }
}

together {
    package pss.factories {
        class "MakeProjectileSimulator" as MakeProjectileSimulator {
            +createProjectileSimulator(): ProjectileSimulator
            -getProjectileGravityHandler(): IGetProjectileGravity
            -getProjectileDragHandler(): IGetProjectileDrag
            -getProjectileForceyHandler(): IGetProjectileForce
            -getProjectileForceHandler(): GetProjectileConstantContinualForce
        }
    }

    package pss {
        class "ProjectileSimulationSuite" as ProjectileSimulationSuite {
            -_results: Vector3d[]
            -_resultsOutputers: IOutputResults[]
            -_configHandler: IGetConfiguration
            -_simulator: ProjectileSimulator
            +{static} main(args: String[]): void
            -{static} initSimulation(): void
            -{static} getOutputers(): IOutputResults[]
            -{static} getOutputerAmount(): int
            -{static} outputResults(): void
        }
    }
}

package pss {
    class "ProjectileSimulator" as ProjectileSimulator {
        -_projectileHandler: IGetProjectile
        -_projectileDragHandler: IGetProjectileDrag
        -_projectileForceHandler: IGetProjectileForce
        -_projectileGravityHandler: IGetProjectileGravity
        -timeStep: double
        +ProjectileSimulator()
        +getProjectile(): Projectile
        +updatePosition(): Vector3d
        -getNewVelocity(): Vector3d
        -getNewPosition(): Vector3d
    }
}


together {
    package pss.handlers {
        class "ConsoleOutputer" as ConsoleOutputer {
            +outputResults(): void
            -formatVector(): String
            -formatDouble(): String
        }

        class "GetProjectileGravity" as GetProjectileGravity {
            -_configurationHandler: IGetConfiguration
            -_projectileHandler: IGetProjectile
            +GetProjectileGravity()
            +getProjectileGravity(): Vector3d
        }

        class "GetProjectile" as GetProjectile {
            -_configurationHandler: IGetConfiguration
            -_instance: Projectile
            +GetProjectile()
            +getProjectile(): Projectile
            -createProjectile(): Projectile
        }

        class "ChartOutputer3d" as ChartOutputer3d {
            -lineStrip: LineStrip
            +outputResults(): void
            +init(): void
        }

        class "ChartOutputer3dNonACC" as ChartOutputer3dNonACC {
            +outputResults(): void
            +displayChart(): void
        }


        class "GetProjectileConstantContinualForce" as GetProjectileConstantContinualForce {
            -_configurationHandler: IGetConfiguration
            -_projectileHandler: IGetProjectile
            +GetProjectileConstantContinualForce()
            +getProjectileForce(): Vector3d
        }

        class "GetProjectileDrag" as GetProjectileDrag {
            -_configurationHandler: IGetConfiguration
            -_projectileHandler: IGetProjectile
            +GetProjectileDrag()
            +getProjectileDrag(): Vector3d
        }

        class "BaseGetConfiguration" {
            -_settings: HashMap<String, Object>
            +BaseGetConfiguration()
            +BaseGetConfiguration()
            +getSetting(): T
            +overrideSettings(): void
            +overrideSetting(): void
        }

        class "FileGetConfiguration" {
            -FILE_PATH: String = "simulatorSettings.json"
            +FileGetConfiguration()
            +FileGetConfiguration()
            +parseJsonFile(): HashMap<String, Object>
            -initializeSettings(): void
        }

    }

    package pss.interfaces {
        interface "IGetConfiguration" {
            +getSetting(setting: Settings): <T> T
        }

        interface "IGetProjectile" {
            +getProjectile(): Projectile
        }

        interface "IGetProjectileDrag" {
            +getProjectileDrag(): Vector3d
        }

        interface "IGetProjectileForce" {
            +getProjectileForce(): Vector3d
        }

        interface "IGetProjectileGravity" {
            +getProjectileGravity(): Vector3d
        }

        interface "IOutputResults" {
            +outputResults(results: Vector3d[]): void
        }

        interface "I3dOutputer" as I3dOutputer {
            +lineStripFromResults(results: Vector3d[]): LineStrip
            +displayChart(lineStrip: LineStrip): void
        }
    }
}

BaseGetConfiguration <|-up- FileGetConfiguration: extends

IGetProjectileForce <.up. GetProjectileConstantContinualForce: implements
IGetProjectileDrag <.up. GetProjectileDrag: implements
IGetProjectile <.up. GetProjectile: implements
IGetProjectileGravity <.up. GetProjectileGravity: implements

IOutputResults <.up. ConsoleOutputer: implements
I3dOutputer <.up. ChartOutputer3d: implements
I3dOutputer <.up. ChartOutputer3dNonACC: implements

ProjectileSimulator --> IGetProjectile : uses
ProjectileSimulator --> IGetProjectileDrag : uses
ProjectileSimulator --> IGetProjectileForce : uses
ProjectileSimulator --> IGetProjectileGravity : uses

GetProjectileGravity ..> GetProjectile: uses
Projectile -up-> GetProjectile: is created by
Projectile -right-> ProjectileSimulator: is manipulated by

MakeProjectileSimulator ..> ProjectileSimulator: creates
MakeProjectileSimulator ..> GetProjectile: creates
MakeProjectileSimulator ..> GetProjectileGravity: creates

MakeProjectileSimulator <-left- ProjectileSimulationSuite: uses

ProjectileSimulationSuite --> ProjectileSimulator: uses
ProjectileSimulationSuite --> ConsoleOutputer: uses
ProjectileSimulationSuite --> IGetConfiguration: uses
ProjectileSimulationSuite --> IOutputResults: uses

@enduml
#+end_src
